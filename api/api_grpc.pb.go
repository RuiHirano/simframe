// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimulatorServiceClient is the client API for SimulatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimulatorServiceClient interface {
	RunSimulator(ctx context.Context, in *RunSimulatorRequest, opts ...grpc.CallOption) (*RunSimulatorResponse, error)
	GetNeighborAgents(ctx context.Context, in *GetNeighborAgentsRequest, opts ...grpc.CallOption) (*GetNeighborAgentsResponse, error)
}

type simulatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimulatorServiceClient(cc grpc.ClientConnInterface) SimulatorServiceClient {
	return &simulatorServiceClient{cc}
}

func (c *simulatorServiceClient) RunSimulator(ctx context.Context, in *RunSimulatorRequest, opts ...grpc.CallOption) (*RunSimulatorResponse, error) {
	out := new(RunSimulatorResponse)
	err := c.cc.Invoke(ctx, "/api.SimulatorService/RunSimulator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorServiceClient) GetNeighborAgents(ctx context.Context, in *GetNeighborAgentsRequest, opts ...grpc.CallOption) (*GetNeighborAgentsResponse, error) {
	out := new(GetNeighborAgentsResponse)
	err := c.cc.Invoke(ctx, "/api.SimulatorService/GetNeighborAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimulatorServiceServer is the server API for SimulatorService service.
// All implementations must embed UnimplementedSimulatorServiceServer
// for forward compatibility
type SimulatorServiceServer interface {
	RunSimulator(context.Context, *RunSimulatorRequest) (*RunSimulatorResponse, error)
	GetNeighborAgents(context.Context, *GetNeighborAgentsRequest) (*GetNeighborAgentsResponse, error)
	mustEmbedUnimplementedSimulatorServiceServer()
}

// UnimplementedSimulatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimulatorServiceServer struct {
}

func (UnimplementedSimulatorServiceServer) RunSimulator(context.Context, *RunSimulatorRequest) (*RunSimulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSimulator not implemented")
}
func (UnimplementedSimulatorServiceServer) GetNeighborAgents(context.Context, *GetNeighborAgentsRequest) (*GetNeighborAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNeighborAgents not implemented")
}
func (UnimplementedSimulatorServiceServer) mustEmbedUnimplementedSimulatorServiceServer() {}

// UnsafeSimulatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimulatorServiceServer will
// result in compilation errors.
type UnsafeSimulatorServiceServer interface {
	mustEmbedUnimplementedSimulatorServiceServer()
}

func RegisterSimulatorServiceServer(s grpc.ServiceRegistrar, srv SimulatorServiceServer) {
	s.RegisterService(&SimulatorService_ServiceDesc, srv)
}

func _SimulatorService_RunSimulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunSimulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).RunSimulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SimulatorService/RunSimulator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).RunSimulator(ctx, req.(*RunSimulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulatorService_GetNeighborAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNeighborAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).GetNeighborAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SimulatorService/GetNeighborAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).GetNeighborAgents(ctx, req.(*GetNeighborAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SimulatorService_ServiceDesc is the grpc.ServiceDesc for SimulatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimulatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.SimulatorService",
	HandlerType: (*SimulatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunSimulator",
			Handler:    _SimulatorService_RunSimulator_Handler,
		},
		{
			MethodName: "GetNeighborAgents",
			Handler:    _SimulatorService_GetNeighborAgents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// EngineServiceClient is the client API for EngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngineServiceClient interface {
	RegisterSimulator(ctx context.Context, in *RegisterSimulatorRequest, opts ...grpc.CallOption) (*RegisterSimulatorResponse, error)
}

type engineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineServiceClient(cc grpc.ClientConnInterface) EngineServiceClient {
	return &engineServiceClient{cc}
}

func (c *engineServiceClient) RegisterSimulator(ctx context.Context, in *RegisterSimulatorRequest, opts ...grpc.CallOption) (*RegisterSimulatorResponse, error) {
	out := new(RegisterSimulatorResponse)
	err := c.cc.Invoke(ctx, "/api.EngineService/RegisterSimulator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServiceServer is the server API for EngineService service.
// All implementations must embed UnimplementedEngineServiceServer
// for forward compatibility
type EngineServiceServer interface {
	RegisterSimulator(context.Context, *RegisterSimulatorRequest) (*RegisterSimulatorResponse, error)
	mustEmbedUnimplementedEngineServiceServer()
}

// UnimplementedEngineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEngineServiceServer struct {
}

func (UnimplementedEngineServiceServer) RegisterSimulator(context.Context, *RegisterSimulatorRequest) (*RegisterSimulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSimulator not implemented")
}
func (UnimplementedEngineServiceServer) mustEmbedUnimplementedEngineServiceServer() {}

// UnsafeEngineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineServiceServer will
// result in compilation errors.
type UnsafeEngineServiceServer interface {
	mustEmbedUnimplementedEngineServiceServer()
}

func RegisterEngineServiceServer(s grpc.ServiceRegistrar, srv EngineServiceServer) {
	s.RegisterService(&EngineService_ServiceDesc, srv)
}

func _EngineService_RegisterSimulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSimulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).RegisterSimulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EngineService/RegisterSimulator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).RegisterSimulator(ctx, req.(*RegisterSimulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EngineService_ServiceDesc is the grpc.ServiceDesc for EngineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EngineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.EngineService",
	HandlerType: (*EngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSimulator",
			Handler:    _EngineService_RegisterSimulator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
